#!/usr/bin/env python3

import json
import atexit
from string import Template
import click
from click_default_group import DefaultGroup
import os
import errno
import time
import sys
from pathlib import Path
import hashlib
from subprocess import PIPE, run

import logging
from rich.logging import RichHandler
import toml

from PyQt5.QtWebChannel import QWebChannel
from PyQt5.QtCore import *
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QIcon


class DotDict(dict):
    def __getattr__(self, item):
        return self[item]


config = toml.load(Path.home() / ".config" / "PDFJSViewer.toml", _dict=DotDict)
PDFJS = f"file://{config.pdfjs}/web/viewer.html"


def synctexView(i, pdf):
    command = ["synctex", "view", "-i", i, "-o", str(pdf)]
    logging.debug("synctex view -i %s -o %s", i, pdf)
    result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
    if result.returncode == 0:
        ans = []
        for line in result.stdout.splitlines():
            if line[:5] == "Page:":
                ans.append(int(line[5:]))
            if line[:2] == "y:":
                ans.append(float(line[2:]))
                return ans
    else:
        print(result.stdout)
        print(result.stderr)


def synctexEdit(o):
    command = ["synctex", "edit", "-o", o]
    logging.debug("synctex edit -o %s", o)
    result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
    if result.returncode == 0:
        ans = []
        for line in result.stdout.splitlines():
            if line[:6] == "Input:":
                ans.append(line[6:])
            elif line[:5] == "Line:":
                ans.append(int(line[5:]))
        return ans
    return None, None


def cleanPipe(fifo):
    if fifo.exists():
        os.system(f"rm {fifo}")


class Worker(QObject):
    setPosition = pyqtSignal((int, float))
    finished = pyqtSignal()

    def __init__(self, FIFO):
        super().__init__()
        self.FIFO = FIFO

    def run(self):
        try:
            os.mkfifo(self.FIFO)
            atexit.register(cleanPipe, self.FIFO)
        except OSError as oe:
            if oe.errno != errno.EEXIST:
                raise

        with open(self.FIFO) as fifo:
            while True:
                data = fifo.read()
                if len(data) == 0:
                    time.sleep(0.2)
                else:
                    pageNumber, yPos = eval(data.strip())
                    self.setPosition.emit(pageNumber, yPos)


class FileWatcher(QObject):
    fileChanged = pyqtSignal(Path)

    def __init__(self, file, interval, lag, parent=None):
        super().__init__(parent)
        self.file = Path(file)
        self._timer = QTimer()
        self._timer.timeout.connect(self._watching)
        self._timer.setInterval(int(1000 * interval))
        self._timer.start()
        self._lastModified = self.file.stat().st_mtime
        self._lag = lag

    def _watching(self):
        if not self.file.exists():
            return
        mtime = self.file.stat().st_mtime
        if mtime > self._lastModified and time.time() > mtime + self._lag:
            # Reduce refresh times when a latex file is compiled multiple times.
            logging.debug(
                "Loading file (new mtime: %.3f, old mtime: %.3f)",
                mtime,
                self._lastModified,
            )
            self._lastModified = mtime
            self.fileChanged.emit(self.file)


class QWebView(QWebEngineView):
    def __init__(self, url, parent=None):
        QWebEngineView.__init__(self)
        self.settings().setAttribute(QWebEngineSettings.FullScreenSupportEnabled, True)
        s = """
            Window.prototype._addEventListener = Window.prototype.addEventListener;

            Window.prototype.addEventListener = function(a, b, c) {
               if (c==undefined) c=false;
               this._addEventListener(a,b,c);
               if (! this.eventListenerList) this.eventListenerList = {};
               if (! this.eventListenerList[a]) this.eventListenerList[a] = [];
               this.eventListenerList[a].push({listener:b,options:c});
            };
        """

        script = QWebEngineScript()
        script.setName("_eventListener")
        script.setInjectionPoint(QWebEngineScript.DocumentCreation)
        script.setWorldId(QWebEngineScript.ApplicationWorld)
        script.setWorldId(QWebEngineScript.MainWorld)
        script.setSourceCode(s)
        self.page().profile().scripts().insert(script)

        self.loadUrl(url)
        self.page().fullScreenRequested.connect(lambda request: request.accept())
        self.loadFinished.connect(self.onLoadFinished)

        QWebEngineProfile.defaultProfile().downloadRequested.connect(
            self.onDownloadRequested
        )

    @pyqtSlot(QWebEngineDownloadItem)
    def onDownloadRequested(self, download):
        path, _ = QFileDialog.getSaveFileName(self, "Save File", "sample.pdf", "*.pdf")
        if path:
            download.setPath(path)
            download.accept()

    @pyqtSlot(bool)
    def onLoadFinished(self, ok):
        if ok:
            self.loadQwebchannel()
            self.loadControlJS()

    def loadQwebchannel(self):
        file = QFile(":/qtwebchannel/qwebchannel.js")
        if file.open(QIODevice.ReadOnly):
            content = file.readAll()
            file.close()
            self.page().runJavaScript(content.data().decode())

    def loadControlJS(self):
        page = self.page()
        page.runJavaScript(
            f"""
            const config = JSON.parse(String.raw`{json.dumps(config)}`);
            """
        )

        with open(f"{config.pdfjs}/web/py_control.js", "r") as fp:
            page.runJavaScript(fp.read())

    def loadUrl(self, url):
        logging.info(f"loading: {PDFJS}?file={url}")
        self.load(QUrl.fromUserInput(f"{PDFJS}?file={url}"))


class InverseSearch(QObject):
    def __init__(self, pdfFile):
        super().__init__()
        self._pdfFile = pdfFile

    @pyqtSlot(int, float, float)
    def do(self, pageNumber, x, y):
        try:
            file, line = synctexEdit(f"{pageNumber}:{x:.3f}:{y:.3f}:{self._pdfFile}")
        except FileNotFoundError:
            logging.warning("Cannot find synctex")
            return
        if file is not None and line is not None:
            cmd = Template(config.inverse_search).substitute(line=line, tex=file)
            logging.debug(f"inverse search: %s", cmd)
            os.system(cmd)


class PDFJSViewer(QMainWindow):
    def __init__(self, pdfFile: Path, unique="", initPage=-1, FIFO="", parent=None):
        super().__init__(parent)
        self.pdfFile = pdfFile
        self.fileWatcher = FileWatcher(
            self.pdfFile,
            interval=config.file_change_check_interval,
            lag=config.file_change_check_lag,
            parent=self,
        )
        self.setWindowTitle(pdfFile.name)
        self.addWebWidget(initPage)
        self.fileWatcher.fileChanged.connect(
            lambda: self.webWidget.loadUrl(self.pdfFile)
        )
        self.channel = QWebChannel()
        self.webWidget.page().setWebChannel(self.channel)
        self._fifo = FIFO
        if FIFO != "":
            self._inverseSearch = InverseSearch(self.pdfFile)
            self.channel.registerObject("inverse_search", self._inverseSearch)
            self.createPipeMonitor(FIFO)

        if unique != "":

            def _timer():
                QTimer.singleShot(
                    250, lambda: sendPos(self._fifo, self.pdfFile, unique)
                )
                self.webWidget.loadFinished.disconnect(_timer)

            self.webWidget.loadFinished.connect(_timer)
        self.show()

    def createPipeMonitor(self, FIFO):
        self.thread = QThread()
        self.pipeMonitor = Worker(FIFO)
        self.pipeMonitor.moveToThread(self.thread)
        self.thread.started.connect(self.pipeMonitor.run)
        self.pipeMonitor.finished.connect(self.thread.quit)
        self.pipeMonitor.finished.connect(self.pipeMonitor.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.pipeMonitor.setPosition.connect(self.setPosition)
        self.thread.start()

    def addWebWidget(self, initPage):
        url = str(self.pdfFile)
        if initPage > 0:
            url += f"#page={initPage}"
        self.webWidget = QWebView(url, parent=self)
        self.setCentralWidget(self.webWidget)

    def setPosition(self, pageNumber, y):
        page = self.webWidget.page()
        page.runJavaScript(
            f"gotoPosition({pageNumber}, 0, {y}, true, -window.innerHeight / 2, 2);"
        )

    # TODO: https://github.com/mozilla/pdf.js/issues/15453
    # https://github.com/mozilla/pdf.js/pull/15455


def get_fifo_name(pdfFile):
    h = hashlib.sha1()
    h.update(str(pdfFile).encode())
    fifo = Path(f"/tmp/{h.hexdigest()[:8]}")
    return fifo


def sendPos(fifo, pdfFile, unique):
    try:
        pageNumber, yPos = synctexView(unique, pdfFile)
    except FileNotFoundError:
        logging.warning("Cannot find synctex")
        return
    logging.info(f"sending position (page={pageNumber}, y={yPos}) to {pdfFile}")
    with fifo.open("w") as fp:
        print(pageNumber, ",", yPos, file=fp)


@click.group(cls=DefaultGroup, default="main", default_if_no_args=True)
@click.option("--debug", is_flag=True, default=False, hidden=True)
def cli(debug):
    logging.basicConfig(
        level=logging.DEBUG if debug else logging.INFO,
        format="%(message)s",
        handlers=[RichHandler()],
    )


@cli.command()
@click.argument("pdf_file", nargs=1)
@click.option("--init_page", type=int, default=-1)
@click.option("--unique", type=str, default="")
def main(pdf_file, unique, init_page):
    pdf_file = Path(pdf_file).absolute()
    if not pdf_file.exists():
        logging.error("%s is not found.", pdf_file)
        sys.exit(1)
    fifo = get_fifo_name(pdf_file)
    if unique != "" and fifo.exists():
        sendPos(fifo, pdf_file, unique)
    else:
        app = QApplication(sys.argv)
        app.setWindowIcon(
            QIcon(
                config.pdfjs
                + "/"
                + ("logo.svg" if sys.platform == "darwin" else "logo.png")
            )
        )
        config["_inverseSearch"] = unique != ""
        window = PDFJSViewer(
            pdf_file, unique=unique, initPage=init_page, FIFO=fifo if unique else ""
        )
        sys.exit(app.exec())


@cli.command()
def clear_storage():
    """
    It is for the case that exiting in the fullscreen mode causes broken documenation position cache.
    """
    app = QApplication(sys.argv)
    storageDir = Path(QWebEngineProfile.defaultProfile().persistentStoragePath())
    logging.info("persistent Storage Path: %s", storageDir)
    import shutil

    if storageDir.exists():
        logging.info("removing")
        shutil.rmtree(storageDir)


if __name__ == "__main__":
    cli()
